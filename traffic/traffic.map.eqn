-- Copyright (C) 1991-2005 Altera Corporation
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, Altera MegaCore Function License 
-- Agreement, or other applicable license agreement, including, 
-- without limitation, that your use is for the sole purpose of 
-- programming logic devices manufactured by Altera and sold by 
-- Altera or its authorized distributors.  Please refer to the 
-- applicable agreement for further details.
--data[0] is data[0]
data[0] = DFFEAS(A1L26, clk1khz,  ,  ,  ,  ,  ,  ,  );


--data[1] is data[1]
data[1] = DFFEAS(A1L27, clk1khz,  ,  ,  ,  ,  ,  ,  );


--data[2] is data[2]
data[2] = DFFEAS(A1L28, clk1khz,  ,  ,  ,  ,  ,  ,  );


--data[3] is data[3]
data[3] = DFFEAS(A1L29, clk1khz,  ,  ,  ,  ,  ,  ,  );


--A1L56 is reduce_or~116
A1L56 = data[0] & (data[3] $ (!data[1] & !data[2])) # !data[0] & !data[1] & data[2] & !data[3];


--A1L57 is reduce_or~117
A1L57 = data[1] & (data[0] & (data[3]) # !data[0] & data[2]) # !data[1] & data[2] & (data[0] $ data[3]);


--A1L58 is reduce_or~118
A1L58 = data[2] & data[3] & (data[1] # !data[0]) # !data[2] & !data[0] & data[1] & !data[3];


--A1L59 is reduce_or~119
A1L59 = data[1] & (data[0] & data[2] # !data[0] & !data[2] & data[3]) # !data[1] & !data[3] & (data[0] $ data[2]);


--A1L60 is reduce_or~120
A1L60 = data[0] & (data[1] $ !data[2] # !data[3]) # !data[0] & !data[1] & data[2] & !data[3];


--A1L61 is reduce_or~121
A1L61 = data[1] & (data[2] & data[0] # !data[2] & (!data[3])) # !data[1] & data[0] & (data[2] $ !data[3]);


--A1L62 is reduce_or~122
A1L62 = data[1] & (!data[2] # !data[0]) # !data[1] & (data[2] & (data[0] # !data[3]) # !data[2] & (data[3]));


--temp is temp
temp = DFFEAS(A1L79, clk1khz,  ,  ,  ,  ,  ,  ,  );


--time1[0] is time1[0]
time1[0] = DFFEAS(A1L82, clk1hz,  ,  , !stop,  ,  ,  ,  );


--time2[0] is time2[0]
time2[0] = DFFEAS(A1L94, clk1hz,  ,  , A1L90,  ,  ,  ,  );


--A1L26 is data~48
A1L26 = temp & time1[0] # !temp & (time2[0]);


--time1[1] is time1[1]
time1[1] = DFFEAS(A1L86, clk1hz,  ,  , !stop,  ,  ,  ,  );


--time2[1] is time2[1]
time2[1] = DFFEAS(A1L1, clk1hz,  ,  , A1L90,  ,  ,  ,  );


--A1L27 is data~49
A1L27 = temp & time1[1] # !temp & (time2[1]);


--time1[2] is time1[2]
time1[2] = DFFEAS(A1L87, clk1hz,  ,  , !stop,  ,  ,  ,  );


--time2[2] is time2[2]
time2[2] = DFFEAS(A1L95, clk1hz,  ,  , A1L90,  ,  ,  ,  );


--A1L28 is data~50
A1L28 = temp & time1[2] # !temp & (time2[2]);


--time1[3] is time1[3]
time1[3] = DFFEAS(A1L2, clk1hz,  ,  , !stop,  ,  ,  ,  );


--time2[3] is time2[3]
time2[3] = DFFEAS(A1L96, clk1hz,  ,  , A1L90,  ,  ,  ,  );


--A1L29 is data~51
A1L29 = temp & time1[3] # !temp & (time2[3]);


--A1L3 is always3~404
A1L3 = !time1[1] & !time1[2] # !time1[3];


--flag is flag
flag = DFFEAS(A1L40, clk1hz,  ,  ,  ,  ,  ,  ,  );


--A1L64 is rtl~52
A1L64 = !time2[0] & !time2[1] & !time2[2];


--A1L4 is always3~405
A1L4 = A1L64 & !time1[2] & !time1[3] & !time2[3];


--A1L12 is comb~453
A1L12 = reset # A1L3 & (flag # A1L4);


--A1L13 is comb~454
A1L13 = A1L3 & !flag & !reset & !A1L4;


--A1L14 is comb~455
A1L14 = reset # A1L3 & (flag # !A1L4);


--A1L15 is comb~456
A1L15 = A1L3 & A1L4 & !flag & !reset;


--A1L11 is comb~11
A1L11 = A1L3 & !flag & !reset;


--A1L8 is comb~4
A1L8 = reset # flag & A1L3;


--A1L16 is comb~457
A1L16 = reset # A1L3 & (A1L4 # !flag);


--A1L17 is comb~458
A1L17 = flag & A1L3 & !reset & !A1L4;


--A1L18 is comb~459
A1L18 = !reset & (flag & A1L4 # !A1L3);


--A1L7 is comb~2
A1L7 = reset # !A1L4 # !A1L3 # !flag;


--A1L10 is comb~8
A1L10 = reset # !A1L3 # !flag;


--A1L19 is comb~460
A1L19 = !reset & (flag # !A1L3);


--A1L94 is time2~93
A1L94 = !time2[0] & (time2[1] # time2[2] # time2[3]);


--A1L65 is rtl~53
A1L65 = !time1[0] & !time1[1];


--A1L90 is time2[0]~94
A1L90 = A1L65 & !time1[2] & !time1[3] & !stop;


--A1L86 is time1~111
A1L86 = time1[0] & (time1[1]) # !time1[0] & !time1[1] & (time1[2] # time1[3]);


--A1L1 is add~255
A1L1 = time2[0] $ !time2[1];


--A1L87 is time1~112
A1L87 = time1[0] & (time1[2]) # !time1[0] & (time1[1] & (time1[2]) # !time1[1] & time1[3] & !time1[2]);


--A1L95 is time2~95
A1L95 = time2[0] & (time2[2]) # !time2[0] & (time2[1] & (time2[2]) # !time2[1] & time2[3] & !time2[2]);


--A1L2 is add~256
A1L2 = time1[3] $ (!time1[0] & !time1[1] & !time1[2]);


--A1L96 is time2~96
A1L96 = time2[3] & (time2[0] # time2[1] # time2[2]);


--A1L40 is flag~81
A1L40 = flag $ (!time2[3] & A1L64 & A1L90);


--A1L74 is stop~157
A1L74 = light[0]$latch & light[7]$latch & !light[5]$latch # !light[0]$latch & !light[7]$latch & light[5]$latch;


--A1L75 is stop~158
A1L75 = light[2]$latch & !light[0]$latch & (zhu # !zhi) # !light[2]$latch & zhi & !zhu & light[0]$latch;


--A1L76 is stop~159
A1L76 = !light[1]$latch & !light[6]$latch & A1L74 & A1L75;


--A1L20 is comb~461
A1L20 = zhi & zhu;


--A1L9 is comb~7
A1L9 = zhi & zhu & !reset;


--A1L79 is temp~2
A1L79 = !temp;


--A1L82 is time1[0]~113
A1L82 = !time1[0];


--light[0]$latch is light[0]$latch
light[0]$latch = !A1L12 & (light[0]$latch # A1L13);


--light[1]$latch is light[1]$latch
light[1]$latch = !A1L14 & (light[1]$latch # A1L15);


--light[2]$latch is light[2]$latch
light[2]$latch = !A1L11 & (light[2]$latch # A1L8);


--light[5]$latch is light[5]$latch
light[5]$latch = !A1L16 & (light[5]$latch # A1L17);


--light[6]$latch is light[6]$latch
light[6]$latch = A1L18 & (light[6]$latch # !A1L7);


--light[7]$latch is light[7]$latch
light[7]$latch = A1L10 & (light[7]$latch # !A1L19);


--stop is stop
stop = !A1L9 & (A1L77 # reset);


--A1L77 is stop~160
A1L77 = A1L20 & (stop) # !A1L20 & A1L76;


--clk1khz is clk1khz
--operation mode is input

clk1khz = INPUT();


--reset is reset
--operation mode is input

reset = INPUT();


--clk1hz is clk1hz
--operation mode is input

clk1hz = INPUT();


--zhi is zhi
--operation mode is input

zhi = INPUT();


--zhu is zhu
--operation mode is input

zhu = INPUT();


--dout[0] is dout[0]
--operation mode is output

dout[0] = OUTPUT(!A1L56);


--dout[1] is dout[1]
--operation mode is output

dout[1] = OUTPUT(!A1L57);


--dout[2] is dout[2]
--operation mode is output

dout[2] = OUTPUT(!A1L58);


--dout[3] is dout[3]
--operation mode is output

dout[3] = OUTPUT(!A1L59);


--dout[4] is dout[4]
--operation mode is output

dout[4] = OUTPUT(!A1L60);


--dout[5] is dout[5]
--operation mode is output

dout[5] = OUTPUT(!A1L61);


--dout[6] is dout[6]
--operation mode is output

dout[6] = OUTPUT(A1L62);


--dout[7] is dout[7]
--operation mode is output

dout[7] = OUTPUT(GND);


--scan[0] is scan[0]
--operation mode is output

scan[0] = OUTPUT(!temp);


--scan[1] is scan[1]
--operation mode is output

scan[1] = OUTPUT(temp);


--scan[2] is scan[2]
--operation mode is output

scan[2] = OUTPUT(GND);


--scan[3] is scan[3]
--operation mode is output

scan[3] = OUTPUT(GND);


--scan[4] is scan[4]
--operation mode is output

scan[4] = OUTPUT(GND);


--scan[5] is scan[5]
--operation mode is output

scan[5] = OUTPUT(GND);


--light[0] is light[0]
--operation mode is output

light[0] = OUTPUT(light[0]$latch);


--light[1] is light[1]
--operation mode is output

light[1] = OUTPUT(light[1]$latch);


--light[2] is light[2]
--operation mode is output

light[2] = OUTPUT(light[2]$latch);


--light[3] is light[3]
--operation mode is output

light[3] = OUTPUT(GND);


--light[4] is light[4]
--operation mode is output

light[4] = OUTPUT(GND);


--light[5] is light[5]
--operation mode is output

light[5] = OUTPUT(light[5]$latch);


--light[6] is light[6]
--operation mode is output

light[6] = OUTPUT(light[6]$latch);


--light[7] is light[7]
--operation mode is output

light[7] = OUTPUT(light[7]$latch);


