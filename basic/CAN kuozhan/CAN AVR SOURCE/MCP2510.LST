C51 COMPILER V7.50   MCP2510                                                               07/11/2005 20:13:03 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE MCP2510
OBJECT MODULE PLACED IN MCP2510.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE MCP2510.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /************************************************************************************\
   2                  MCP2510 CAN总线试验演示程序2003.10
   3          \************************************************************************************/
   4          
   5          
   6          #include "MCP2510.h"
   7          #include "def.h"
   8          #include "regx51.h"
   9          
  10          /********************** MCP2510 Pin *********************************/
  11          //#define MCP2510_CS                            0x4             //EXIO2
  12          
  13          /********************** MCP2510 Instruction *********************************/
  14          #define MCP2510INSTR_RESET              0xc0
  15          #define MCP2510INSTR_READ               0x03
  16          #define MCP2510INSTR_WRITE              0x02
  17          #define MCP2510INSTR_RTS                0x80    //request to send
  18          #define MCP2510INSTR_RDSTAT     0xa0    //read status
  19          #define MCP2510INSTR_BITMDFY    0x05    //bit modify
  20          
  21          
  22          //#define MCP2510_Enable()              do{CLREXIOBIT(MCP2510_CS);}while(0)
  23          //#define MCP2510_Disable()             do{SETEXIOBIT(MCP2510_CS); Delay(1);}while(0)
  24          
  25              MCP2510_Enable()
  26              {P1_0=0;}
  27          
  28                  MCP2510_Disable()
  29              {P1_0=1;}
  30          
  31          void MCP2510_Reset()
  32          {
  33   1              MCP2510_Enable();
  34   1      
  35   1              SendSIOData(MCP2510INSTR_RESET);
  36   1      
  37   1              MCP2510_Disable();
  38   1      }
  39          
  40          void MCP2510_Write(int address, int value)
  41          {
  42   1              MCP2510_Enable();
  43   1      
  44   1              SendSIOData(MCP2510INSTR_WRITE);
  45   1              SendSIOData((unsigned char)address);
  46   1              SendSIOData((unsigned char)value);
  47   1      
  48   1              MCP2510_Disable();
  49   1      }
  50          
  51          unsigned char MCP2510_Read(int address)
  52          {
  53   1              unsigned char result;
  54   1      
  55   1              MCP2510_Enable();
C51 COMPILER V7.50   MCP2510                                                               07/11/2005 20:13:03 PAGE 2   

  56   1      
  57   1              SendSIOData(MCP2510INSTR_READ);
  58   1              SendSIOData((unsigned char)address);
  59   1      
  60   1              //SendSIOData(0);
  61   1              result=ReadSIOData();
  62   1      
  63   1              MCP2510_Disable();
  64   1      
  65   1              return result;
  66   1      }
  67          
  68          unsigned char MCP2510_ReadStatus()
  69          {
  70   1              unsigned char result;
  71   1      
  72   1              MCP2510_Enable();
  73   1      
  74   1              SendSIOData(MCP2510INSTR_RDSTAT);
  75   1      
  76   1              result=ReadSIOData();
  77   1      
  78   1              MCP2510_Disable();
  79   1      
  80   1              return result;
  81   1      }
  82          
  83          void MCP2510_WriteBits(int address,int value,int mask)
  84          {  int baddress,bvalue,bmask;
  85   1          baddress=address;
  86   1              bvalue=value;
  87   1              bmask=mask;
  88   1              MCP2510_Enable();
  89   1      
  90   1              SendSIOData(MCP2510INSTR_BITMDFY);
  91   1              SendSIOData((unsigned char)baddress);
  92   1              SendSIOData((unsigned char)bmask);
  93   1              SendSIOData((unsigned char)bvalue);
  94   1      
  95   1              MCP2510_Disable();
  96   1      }
  97          
  98          
  99          void MCP2510_SetBandRate(CanBandRate bandrate, BOOL IsBackNormal)
 100          {
 101   1              //
 102   1              // Bit rate calculations.
 103   1              //
 104   1              //Input clock fre=16MHz
 105   1              // In this case, we'll use a speed of 125 kbit/s, 250 kbit/s, 500 kbit/s.
 106   1              // If we set the length of the propagation segment to 7 bit time quanta,
 107   1              // and we set both the phase segments to 4 quanta each,
 108   1              // one bit will be 1+7+4+4 = 16 quanta in length.
 109   1              //
 110   1              // setting the prescaler (BRP) to 0 => 500 kbit/s.
 111   1              // setting the prescaler (BRP) to 1 => 250 kbit/s.
 112   1              // setting the prescaler (BRP) to 3 => 125 kbit/s.
 113   1              //
 114   1              // If we set the length of the propagation segment to 3 bit time quanta,
 115   1              // and we set both the phase segments to 1 quanta each,
 116   1              // one bit will be 1+3+2+2 = 8 quanta in length.
 117   1              // setting the prescaler (BRP) to 0 => 1 Mbit/s.
C51 COMPILER V7.50   MCP2510                                                               07/11/2005 20:13:03 PAGE 3   

 118   1      
 119   1              // Go into configuration mode
 120   1              MCP2510_Write(MCP2510REG_CANCTRL, MODE_CONFIG);
 121   1      
 122   1              switch(bandrate){
 123   2              case BandRate_125kbps:
 124   2                      MCP2510_Write(CNF1, SJW1|BRP4); //Synchronization Jump Width Length =1 TQ
 125   2                      MCP2510_Write(CNF2, BTLMODE_CNF3|(SEG4<<3)|SEG7); // Phase Seg 1 = 4, Prop Seg = 7
 126   2                      MCP2510_Write(CNF3, SEG4);// Phase Seg 2 = 4
 127   2                      break;
 128   2              case BandRate_250kbps:
 129   2                      MCP2510_Write(CNF1, SJW1|BRP2); //Synchronization Jump Width Length =1 TQ
 130   2                      MCP2510_Write(CNF2, BTLMODE_CNF3|(SEG4<<3)|SEG7); // Phase Seg 1 = 4, Prop Seg = 7
 131   2                      MCP2510_Write(CNF3, SEG4);// Phase Seg 2 = 4
 132   2                      break;
 133   2              case BandRate_500kbps:
 134   2                      MCP2510_Write(CNF1, SJW1|BRP1); //Synchronization Jump Width Length =1 TQ
 135   2                      MCP2510_Write(CNF2, BTLMODE_CNF3|(SEG4<<3)|SEG7); // Phase Seg 1 = 4, Prop Seg = 7
 136   2                      MCP2510_Write(CNF3, SEG4);// Phase Seg 2 = 4
 137   2                      break;
 138   2              case BandRate_1Mbps:
 139   2                      MCP2510_Write(CNF1, SJW1|BRP1); //Synchronization Jump Width Length =1 TQ
 140   2                      MCP2510_Write(CNF2, BTLMODE_CNF3|(SEG3<<3)|SEG2); // Phase Seg 1 = 2, Prop Seg = 3
 141   2                      MCP2510_Write(CNF3, SEG2);// Phase Seg 2 = 1
 142   2                      break;
 143   2              }
 144   1      
 145   1              if(IsBackNormal){
 146   2                      //Enable clock output
 147   2                      MCP2510_Write(CLKCTRL, MODE_LOOPBACK | CLKEN | CLK1);
 148   2              }
 149   1      }
 150          
 151          
 152          /*******************************************\
 153          *       序列读取MCP2510数据                             *
 154          \*******************************************/
 155          /*unsigned char MCP2510_SRead( int address)
 156          {         unsigned char value[8];
 157                  //int i;
 158          
 159                  MCP2510_Enable();
 160                  SendSIOData(MCP2510INSTR_READ);
 161                  SendSIOData((unsigned char)address);
 162                  //for(i=0;i<nlength;i++)
 163              value[0]=ReadSIOData();     
 164                  MCP2510_Disable();
 165                  return value[0];
 166          }*/
 167          
 168          
 169          /*******************************************\
 170          *       序列写入MCP2510数据                             *
 171          \*******************************************/
 172          void MCP2510_Swrite(int address,unsigned char value,unsigned char nlength)
 173          {   //int address;
 174   1              int i;
 175   1              unsigned char IDarry[1];
 176   1              IDarry[0]=value;
 177   1              MCP2510_Enable();
 178   1      
 179   1              SendSIOData(MCP2510INSTR_WRITE);
C51 COMPILER V7.50   MCP2510                                                               07/11/2005 20:13:03 PAGE 4   

 180   1              SendSIOData((unsigned char)address);
 181   1      
 182   1              for (i=0; i < nlength; i++) {
 183   2                      SendSIOData(IDarry[i]);
 184   2                      //pdata++;
 185   2              }
 186   1              MCP2510_Disable();
 187   1      }
 188          
 189          /*******************************************\
 190          *       读取MCP2510 CAN总线ID                           *
 191          *       参数: address为MCP2510寄存器地址*
 192          *                       can_id为返回的ID值                      *
 193          *       返回值                                                          *
 194          *       TRUE，表示是扩展ID(29位)                        *
 195          *       FALSE，表示非扩展ID(11位)               *
 196          \*******************************************/
 197          /*BOOL MCP2510_Read_Can_ID( int address, U32* can_id)
 198          {
 199                  U32 tbufdata;
 200                  unsigned char* p=(unsigned char*)&tbufdata;
 201          
 202                  MCP2510_SRead(address, p, 4);
 203                  *can_id = (tbufdata<<3)|((tbufdata>>13)&0x7);
 204                  *can_id &= 0x7ff;
 205          
 206                  if ( (p[MCP2510LREG_SIDL] & TXB_EXIDE_M) ==  TXB_EXIDE_M ) {
 207                          *can_id = (*can_id<<2) | (p[MCP2510LREG_SIDL] & 0x03);
 208                          *can_id <<= 16;
 209                          *can_id |= tbufdata>>16;
 210                          return TRUE;
 211                  }
 212                  return FALSE;
 213          }*/
 214          
 215          /***********************************************************\
 216          *       读取MCP2510 接收的数据                                                  *
 217          *       参数: nbuffer为第几个缓冲区可以为3或者4 *
 218          *                       can_id为返回的ID值                                                      *
 219          *                       rxRTR表示是否是RXRTR                                            *
 220          *                       data表示读取的数据                                              *
 221          *                       dlc表示data length code                                                 *
 222          *       返回值                                                                                          *
 223          *               TRUE，表示是扩展总线                                            *
 224          *               FALSE，表示非扩展总线                                           *
 225          \***********************************************************/
 226          /*BOOL MCP2510_Read_Can(U8 nbuffer, BOOL* rxRTR, U32* can_id, U8* data , U8* dlc)
 227          {
 228          
 229                  U8 mcp_addr = (nbuffer<<4) + 0x31, ctrl;
 230                  BOOL IsExt;
 231          
 232                  IsExt=MCP2510_Read_Can_ID( mcp_addr, can_id);
 233          
 234                  ctrl=MCP2510_Read(mcp_addr-1);
 235                  *dlc=MCP2510_Read( mcp_addr+4);
 236                  if ((ctrl & 0x08)) {
 237                          *rxRTR = TRUE;
 238                  }
 239                  else{
 240                          *rxRTR = FALSE;
 241                  }
C51 COMPILER V7.50   MCP2510                                                               07/11/2005 20:13:03 PAGE 5   

 242                  *dlc &= DLC_MASK;
 243                  MCP2510_SRead(mcp_addr+5, data, *dlc);
 244          
 245                  return IsExt;
 246          }*/
 247          
 248          
 249          /***********************************************************\
 250          *       写入MCP2510 发送的数据                                                  *
 251          *       参数: nbuffer为第几个缓冲区可以为0、1、2        *
 252          *                       ext表示是否是扩展总线                                   *
 253          *                       can_id为返回的ID值                                                      *
 254          *                       rxRTR表示是否是RXRTR                                            *
 255          *                       data表示读取的数据                                              *
 256          *                       dlc表示data length code                                                 *
 257          *               FALSE，表示非扩展总线                                           *
 258          \***********************************************************/
 259          /*void MCP2510_Write_Can( U8 nbuffer, BOOL ext, U32 can_id, BOOL rxRTR, U8* data,U8 dlc )
 260          {
 261                  U8 mcp_addr = (nbuffer<<4) + 0x31;
 262                  MCP2510_Swrite(mcp_addr+5, data, dlc );  // write data bytes
 263                  MCP2510_Write_Can_ID( mcp_addr, can_id,ext);  // write CAN id
 264                  if (rxRTR)
 265                          dlc |= RTR_MASK;  // if RTR set bit in byte
 266                  MCP2510_Write((mcp_addr+4), dlc);            // write the RTR and DLC
 267          }*/
 268          
 269          /*******************************************\
 270          *       设置MCP2510 CAN总线ID                           *
 271          *       参数: address为MCP2510寄存器地址*
 272          *                       can_id为设置的ID值                      *
 273          *                       IsExt表示是否为扩展ID   *
 274          \*******************************************/
 275          void MCP2510_Write_Can_ID(int address, U32 can_id, BOOL IsExt)
 276          {
 277   1              U32 tbufdata;
 278   1              unsigned char IDarry[4],i;
 279   1      
 280   1              if (IsExt) {
 281   2                      can_id&=0x1fffffff;     //29位
 282   2                      tbufdata=can_id &0xffff;
 283   2                      tbufdata<<=16;
 284   2                      tbufdata|=(can_id>>(18-5)&(~0x1f));
 285   2                      tbufdata |= TXB_EXIDE_M;
 286   2              }
 287   1              else{
 288   2                      can_id&=0x7ff;  //11位
 289   2                      tbufdata= (can_id>>3)|((can_id&0x7)<<13);
 290   2              }
 291   1              IDarry[0]=tbufdata&0xff;
 292   1              IDarry[1]=(tbufdata>>8)&0xff;
 293   1              IDarry[2]=(tbufdata>>16)&0xff;
 294   1              IDarry[3]=(tbufdata>>24)&0xff;
 295   1              for(i=0;i<4;i++)
 296   1              MCP2510_Swrite(address, IDarry[i], 1);
 297   1              
 298   1              //MCP2510_Swrite(address, (unsigned char)tbufdata,4);
 299   1      }  
 300          
 301          
 302          
 303          // Setup the CAN buffers used by the application.
C51 COMPILER V7.50   MCP2510                                                               07/11/2005 20:13:03 PAGE 6   

 304          // We currently use only one for reception and one for transmission.
 305          // It is possible to use several to get a simple form of queue.
 306          //
 307          // We setup the unit to receive all CAN messages.
 308          // As we only have at most 4 different messages to receive, we could use the
 309          // filters to select them for us.
 310          //
 311          // mcp_init() should already have been called.
 312          void canSetup(void)
 313          {
 314   1          // As no filters are active, all messages will be stored in RXB0 only if
 315   1          // no roll-over is active. We want to recieve all CAN messages (standard and extended)
 316   1          // (RXM<1:0> = 11).
 317   1          //SPI_mcp_write_bits(RXB0CTRL, RXB_RX_ANY, 0xFF);
 318   1          //SPI_mcp_write_bits(RXB1CTRL, RXB_RX_ANY, 0xFF);
 319   1      
 320   1          // But there is a bug in the chip, so we have to activate roll-over.
 321   1              MCP2510_WriteBits(RXB0CTRL, (RXB_BUKT+RXB_RX_ANY), 0xFF);
 322   1              MCP2510_WriteBits(RXB1CTRL, RXB_RX_ANY, 0xFF);
 323   1      }
 324          
 325          /***********************************************************************************\
 326                                                                          发送数据
 327                  参数:
 328                          data，发送数据
 329          
 330                  Note: 使用三个缓冲区循环发送，没有做缓冲区有效检测
 331          \***********************************************************************************/
 332          /*void canWrite(U32 id, U8 *pdata, unsigned char dlc, BOOL IsExt, BOOL rxRTR)
 333          {
 334                  static int ntxbuffer=0;
 335                  MCP2510_Write_Can(ntxbuffer, IsExt, id, rxRTR, pdata, dlc);
 336          
 337                  switch(ntxbuffer){
 338                  case 0:
 339                          MCP2510_transmit(TXB10CTRL);
 340                          ntxbuffer=1;
 341                          break;
 342                  case 1:
 343                          MCP2510_transmit(TXB1CTRL);
 344                          ntxbuffer=2;
 345                          break;
 346                  case 2:
 347                          MCP2510_transmit(TXB2CTRL);
 348                          ntxbuffer=0;
 349                          break;
 350                  }
 351          }*/
 352          
 353          void init_MCP2510(CanBandRate bandrate)
 354          {
 355   1              unsigned char i,j,a;
 356   1      
 357   1              MCP2510_Reset();
 358   1      
 359   1      //      for(i=0;i<255;i++)
 360   1      //              Uart_Printf("%x\n",MCP2510_Read(i));
 361   1      
 362   1              MCP2510_SetBandRate(bandrate,FALSE);
 363   1      
 364   1              // Disable interrups.
 365   1              MCP2510_Write(CANINTE, NO_IE);
C51 COMPILER V7.50   MCP2510                                                               07/11/2005 20:13:03 PAGE 7   

 366   1      
 367   1              // Mark all filter bits as don't care:
 368   1              MCP2510_Write_Can_ID(RXM0SIDH, 0,1);
 369   1              MCP2510_Write_Can_ID(RXM1SIDH, 0,1);
 370   1              // Anyway, set all filters to 0:
 371   1              MCP2510_Write_Can_ID(RXF0SIDH, 0, 0);
 372   1              MCP2510_Write_Can_ID(RXF1SIDH, 0, 0);
 373   1              MCP2510_Write_Can_ID(RXF2SIDH, 0, 0);
 374   1              MCP2510_Write_Can_ID(RXF3SIDH, 0, 0);
 375   1              MCP2510_Write_Can_ID(RXF4SIDH, 0, 0);
 376   1              MCP2510_Write_Can_ID(RXF5SIDH, 0, 0);
 377   1      
 378   1                                                                                                                                                      
 379   1              //Enable clock output  MODE_NORMAL
 380   1              //MCP2510_Write(CLKCTRL, MODE_LOOPBACK| CLKEN | CLK1);//回环模式
 381   1              MCP2510_Write(CLKCTRL, MODE_NORMAL| CLKEN | CLK1);//标准模式
 382   1          //如果不能用两台设备联机实验的话，可以选择回环模式
 383   1          //这样在超级终端中可以显示键盘的输入  
 384   1      
 385   1      
 386   1      
 387   1      
 388   1      
 389   1        
 390   1              // Clear, deactivate the three transmit buffers
 391   1              a = TXB0CTRL;
 392   1              for (i = 0; i < 3; i++) {
 393   2                      for (j = 0; j < 14; j++) {
 394   3                              MCP2510_Write(a, 0);
 395   3                              a++;
 396   3                      }
 397   2              a += 2; // We did not clear CANSTAT or CANCTRL
 398   2              }
 399   1              // and the two receive buffers.
 400   1              MCP2510_Write(RXB0CTRL, 0);
 401   1              MCP2510_Write(RXB1CTRL, 0);
 402   1      
 403   1              // The two pins RX0BF and RX1BF are used to control two LEDs; set them as outputs and set them as 00.
 404   1              //MCP2510_Write(BFPCTRL, 0x3C);
 405   1              
 406   1              //Open Interrupt
 407   1              MCP2510_Write(CANINTE, RX0IE|RX1IE);
 408   1      }
 409          
 410          
 411          /***********************************************************************************\
 412                                                                          查询是否收到数据
 413                  返回值:如果没有数据，则返回-1，
 414                                  否则，返回收到数据的缓冲区号
 415                  Note: 如果两个缓冲区都收到数据，则返回第一个缓冲区
 416          \***********************************************************************************/
 417          int canPoll()
 418          {
 419   1              if(MCP2510_ReadStatus()&RX0INT)
 420   1                      return 0;
 421   1              
 422   1              if(MCP2510_ReadStatus()&RX1INT)
 423   1                      return 1;
 424   1      
 425   1              return -1;
 426   1      }
 427          
C51 COMPILER V7.50   MCP2510                                                               07/11/2005 20:13:03 PAGE 8   

 428          void SendSIOData(unsigned char value)
 429          {  
 430   1         char i;
 431   1         
 432   1         for(i=0;i<8;i++)
 433   1           {P1_3=0;
 434   2            
 435   2                P1_1=value&0x80;
 436   2                P1_3=1;
 437   2                value=value<<1;
 438   2               }
 439   1               P1_3=0;
 440   1      }
 441          
 442          unsigned char ReadSIOData(void)
 443          { char i,j;
 444   1        unsigned char d,v=0;
 445   1        
 446   1        for(i=0;i<8;i++)
 447   1        {P1_3=0;
 448   2         P1_3=1;
 449   2         for(j=0;j<10;j++);
 450   2         v=v+(((P1&0x04)<<5)>>i);
 451   2        
 452   2         d=v;
 453   2        }
 454   1        
 455   1        P1_3=0;
 456   1        return (d);
 457   1      }
 458          
 459          /*BOOL canRead(int n, U32* id, U8 *pdata,  U8*dlc, BOOL* rxRTR, BOOL *isExt)
 460          {
 461                  U8 byte;
 462                  byte=MCP2510_Read(CANINTF);
 463          
 464                  if(n==0){
 465                          if(byte & RX0INT){
 466                                  *isExt=MCP2510_Read_Can(n+3, rxRTR, id, pdata, dlc);
 467                                  MCP2510_WriteBits(CANINTF, ~RX0INT, RX0INT); // Clear interrupt
 468                          }
 469                          return FALSE;
 470                  }
 471                  else if(n ==1 ){
 472                          if(byte & RX1INT){
 473                                  *isExt=MCP2510_Read_Can(n+4, rxRTR, id, pdata, dlc);
 474                                  MCP2510_WriteBits(CANINTF, ~RX1INT, RX1INT); // Clear interrupt
 475                          }
 476                          return FALSE;
 477                  }
 478          
 479          
 480          }*/
 481          
 482          /*void CAN_Test()
 483          {
 484                  int i;
 485                  U32 id;
 486                  unsigned char dlc;
 487                  BOOL rxRTR, isExt;
 488                  BOOL temp;
 489                  
C51 COMPILER V7.50   MCP2510                                                               07/11/2005 20:13:03 PAGE 9   

 490                  U8 data[8]={1,2,3,4,5,6,7,8};
 491                  init_MCP2510(BandRate_125kbps);
 492          
 493                  canSetup();
 494                  canWrite(0x123, data, 8, FALSE, FALSE);
 495          
 496                  memset(data,0,8);
 497          
 498                  Delay(100);
 499          
 500                  while((i=canPoll())==-1);
 501          
 502                  temp=canRead(i, &id, data, &dlc, &rxRTR, &isExt);
 503          
 504                  Uart_Printf("\nid=%x",id);
 505                  Uart_Printf("\ndata=%x,%x,%x,%x",data[0],data[1],data[2],data[3]);
 506                  
 507          //      temp=canRead(1, &id, data, &dlc, &rxRTR, &isExt);
 508              
 509                  
 510          }*/
 511             
 512          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    747    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      34
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
